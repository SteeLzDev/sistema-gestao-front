{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SteeL-Note/Documents/WorkspaceVScode/sistema-gestao-front/app/api/fila/mock-data.ts"],"sourcesContent":["// Dados mockados para a API de fila\r\n// Este arquivo simula um banco de dados para testes\r\n\r\nimport type { Cliente, Atendimento } from \"@/types/fila\"\r\n\r\n// Clientes na fila\r\nlet clientesNaFila: Cliente[] = [\r\n  {\r\n    id: 1,\r\n    nome: \"João Silva\",\r\n    servico: \"Troca de Óleo\",\r\n    chegada: new Date(Date.now() - 45 * 60000).toISOString(), // 45 minutos atrás\r\n    prioridade: \"normal\",\r\n    telefone: \"(11) 98765-4321\",\r\n  },\r\n  {\r\n    id: 2,\r\n    nome: \"Maria Oliveira\",\r\n    servico: \"Revisão Completa\",\r\n    chegada: new Date(Date.now() - 20 * 60000).toISOString(), // 20 minutos atrás\r\n    prioridade: \"alta\",\r\n    telefone: \"(11) 91234-5678\",\r\n  },\r\n  {\r\n    id: 3,\r\n    nome: \"Pedro Santos\",\r\n    servico: \"Alinhamento e Balanceamento\",\r\n    chegada: new Date(Date.now() - 10 * 60000).toISOString(), // 10 minutos atrás\r\n    prioridade: \"normal\",\r\n    telefone: \"(11) 99876-5432\",\r\n  },\r\n]\r\n\r\n// Clientes em atendimento\r\nlet clientesEmAtendimento: Atendimento[] = [\r\n  {\r\n    id: 4,\r\n    nome: \"Ana Souza\",\r\n    servico: \"Troca de Pastilhas de Freio\",\r\n    inicio: new Date(Date.now() - 35 * 60000).toISOString(), // 35 minutos atrás\r\n    atendente: \"Carlos Mecânico\",\r\n    status: \"em_atendimento\",\r\n  },\r\n]\r\n\r\n// Próximo ID para novos clientes\r\nlet nextId = 5\r\n\r\n// Funções para manipular os dados\r\nexport const mockFilaService = {\r\n  // Obter todos os clientes na fila\r\n  getClientesNaFila: () => {\r\n    return [...clientesNaFila]\r\n  },\r\n\r\n  // Obter todos os clientes em atendimento\r\n  getClientesEmAtendimento: () => {\r\n    return [...clientesEmAtendimento]\r\n  },\r\n\r\n  // Adicionar um cliente à fila\r\n  adicionarClienteNaFila: (cliente: Omit<Cliente, \"id\" | \"chegada\" | \"espera\">) => {\r\n    const novoCliente: Cliente = {\r\n      id: nextId++,\r\n      nome: cliente.nome,\r\n      servico: cliente.servico,\r\n      prioridade: cliente.prioridade,\r\n      telefone: cliente.telefone,\r\n      chegada: new Date().toISOString(),\r\n    }\r\n\r\n    clientesNaFila.push(novoCliente)\r\n    return novoCliente\r\n  },\r\n\r\n  // Iniciar atendimento de um cliente\r\n  iniciarAtendimento: (id: number, atendente: string) => {\r\n    // Encontrar o cliente na fila\r\n    const index = clientesNaFila.findIndex((c) => c.id === id)\r\n    if (index === -1) {\r\n      throw new Error(\"Cliente não encontrado na fila\")\r\n    }\r\n\r\n    // Remover o cliente da fila\r\n    const cliente = clientesNaFila.splice(index, 1)[0]\r\n\r\n    // Criar um novo atendimento\r\n    const novoAtendimento: Atendimento = {\r\n      id: cliente.id,\r\n      nome: cliente.nome,\r\n      servico: cliente.servico,\r\n      inicio: new Date().toISOString(),\r\n      atendente: atendente,\r\n      status: \"em_atendimento\",\r\n    }\r\n\r\n    // Adicionar à lista de atendimentos\r\n    clientesEmAtendimento.push(novoAtendimento)\r\n\r\n    return novoAtendimento\r\n  },\r\n\r\n  // Finalizar atendimento\r\n  finalizarAtendimento: (id: number) => {\r\n    // Encontrar o atendimento\r\n    const index = clientesEmAtendimento.findIndex((a) => a.id === id)\r\n    if (index === -1) {\r\n      throw new Error(\"Atendimento não encontrado\")\r\n    }\r\n\r\n    // Remover o atendimento\r\n    clientesEmAtendimento.splice(index, 1)\r\n\r\n    return { success: true }\r\n  },\r\n\r\n  // Remover cliente da fila\r\n  removerClienteDaFila: (id: number) => {\r\n    // Encontrar o cliente na fila\r\n    const index = clientesNaFila.findIndex((c) => c.id === id)\r\n    if (index === -1) {\r\n      throw new Error(\"Cliente não encontrado na fila\")\r\n    }\r\n\r\n    // Remover o cliente da fila\r\n    clientesNaFila.splice(index, 1)\r\n\r\n    return { success: true }\r\n  },\r\n\r\n  // Resetar dados (para testes)\r\n  resetarDados: () => {\r\n    clientesNaFila = [\r\n      {\r\n        id: 1,\r\n        nome: \"João Silva\",\r\n        servico: \"Troca de Óleo\",\r\n        chegada: new Date(Date.now() - 45 * 60000).toISOString(),\r\n        prioridade: \"normal\",\r\n        telefone: \"(11) 98765-4321\",\r\n      },\r\n      {\r\n        id: 2,\r\n        nome: \"Maria Oliveira\",\r\n        servico: \"Revisão Completa\",\r\n        chegada: new Date(Date.now() - 20 * 60000).toISOString(),\r\n        prioridade: \"alta\",\r\n        telefone: \"(11) 91234-5678\",\r\n      },\r\n    ]\r\n\r\n    clientesEmAtendimento = [\r\n      {\r\n        id: 3,\r\n        nome: \"Ana Souza\",\r\n        servico: \"Troca de Pastilhas de Freio\",\r\n        inicio: new Date(Date.now() - 35 * 60000).toISOString(),\r\n        atendente: \"Carlos Mecânico\",\r\n        status: \"em_atendimento\",\r\n      },\r\n    ]\r\n\r\n    nextId = 4\r\n\r\n    return { success: true }\r\n  },\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SteeL-Note/Documents/WorkspaceVScode/sistema-gestao-front/app/api/test/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { mockFilaService } from \"../fila/mock-data\"\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Obter dados diretamente do mock service\r\n    const clientesNaFila = mockFilaService.getClientesNaFila()\r\n    const clientesEmAtendimento = mockFilaService.getClientesEmAtendimento()\r\n\r\n    // Retornar dados com timestamp para evitar cache\r\n    return NextResponse.json({\r\n      clientesNaFila,\r\n      clientesEmAtendimento,\r\n      clientesNaFilaLength: clientesNaFila.length,\r\n      clientesEmAtendimentoLength: clientesEmAtendimento.length,\r\n      timestamp: new Date().toISOString(),\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Erro no endpoint de teste:\", error)\r\n    return NextResponse.json({ error: \"Erro ao buscar dados de teste\" }, { status: 500 })\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,0CAA0C;QAC1C,MAAM,iBAAiB,oIAAA,CAAA,kBAAe,CAAC,iBAAiB;QACxD,MAAM,wBAAwB,oIAAA,CAAA,kBAAe,CAAC,wBAAwB;QAEtE,iDAAiD;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA,sBAAsB,eAAe,MAAM;YAC3C,6BAA6B,sBAAsB,MAAM;YACzD,WAAW,IAAI,OAAO,WAAW;QACnC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;AACF","debugId":null}}]
}