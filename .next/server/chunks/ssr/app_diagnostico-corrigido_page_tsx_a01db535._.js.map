{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SteeL-Note/Documents/WorkspaceVScode/sistema-gestao-front/app/diagnostico-corrigido/page.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\n\r\nexport default function DiagnosticoCorrigidoPage() {\r\n  const [logs, setLogs] = useState<string[]>([])\r\n  const [checkboxState, setCheckboxState] = useState({\r\n    checkbox1: true,\r\n    checkbox2: false,\r\n  })\r\n  const [browserInfo, setBrowserInfo] = useState(\"Carregando...\")\r\n  const [currentTime, setCurrentTime] = useState(\"Carregando...\")\r\n\r\n  // Função simples para adicionar logs\r\n  const addLog = (message: string) => {\r\n    setLogs((prev) => [...prev, `${new Date().toISOString().split(\"T\")[1].split(\".\")[0]}: ${message}`])\r\n  }\r\n\r\n  // Efeito para registrar quando o componente é montado\r\n  useEffect(() => {\r\n    addLog(\"Componente montado com sucesso\")\r\n    addLog(`Estado inicial dos checkboxes: ${JSON.stringify(checkboxState)}`)\r\n\r\n    // Definir informações do navegador e hora atual apenas no cliente\r\n    setBrowserInfo(window.navigator.userAgent)\r\n    setCurrentTime(new Date().toLocaleString())\r\n  }, [])\r\n\r\n  // Função para alternar o estado do checkbox\r\n  const toggleCheckbox = (name: string) => {\r\n    addLog(`Alternando checkbox ${name}`)\r\n    setCheckboxState((prev) => ({\r\n      ...prev,\r\n      [name]: !prev[name as keyof typeof prev],\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Diagnóstico Corrigido</h1>\r\n\r\n      <div className=\"mb-6 p-4 border rounded-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Checkboxes Básicos</h2>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"checkbox1\"\r\n              checked={checkboxState.checkbox1}\r\n              onChange={() => toggleCheckbox(\"checkbox1\")}\r\n              className=\"h-4 w-4\"\r\n            />\r\n            <label htmlFor=\"checkbox1\">Checkbox 1 (deve estar marcado)</label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"checkbox2\"\r\n              checked={checkboxState.checkbox2}\r\n              onChange={() => toggleCheckbox(\"checkbox2\")}\r\n              className=\"h-4 w-4\"\r\n            />\r\n            <label htmlFor=\"checkbox2\">Checkbox 2 (deve estar desmarcado)</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-6 p-4 border rounded-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Logs</h2>\r\n        <div className=\"bg-gray-100 p-4 rounded-md\">\r\n          <pre className=\"whitespace-pre-wrap text-sm\">\r\n            {logs.map((log, index) => (\r\n              <div key={index}>{log}</div>\r\n            ))}\r\n          </pre>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-6 p-4 border rounded-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Informações do Ambiente</h2>\r\n        <pre className=\"bg-gray-100 p-4 rounded-md whitespace-pre-wrap text-sm\">\r\n          {`\r\nNavegador: ${browserInfo}\r\nHora atual: ${currentTime}\r\nModo de renderização: Client-side\r\n          `}\r\n        </pre>\r\n      </div>\r\n\r\n      <button\r\n        className=\"px-4 py-2 bg-blue-500 text-white rounded-md\"\r\n        onClick={() => {\r\n          addLog(\"Botão de teste clicado\")\r\n          alert(\"Botão de teste funcionando!\")\r\n        }}\r\n      >\r\n        Testar Interatividade\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC7C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACjD,WAAW;QACX,WAAW;IACb;IACA,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,qCAAqC;IACrC,MAAM,SAAS,CAAC;QACd,QAAQ,CAAC,OAAS;mBAAI;gBAAM,GAAG,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,SAAS;aAAC;IACpG;IAEA,sDAAsD;IACtD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,OAAO;QACP,OAAO,CAAC,+BAA+B,EAAE,KAAK,SAAS,CAAC,gBAAgB;QAExE,kEAAkE;QAClE,eAAe,OAAO,SAAS,CAAC,SAAS;QACzC,eAAe,IAAI,OAAO,cAAc;IAC1C,GAAG,EAAE;IAEL,4CAA4C;IAC5C,MAAM,iBAAiB,CAAC;QACtB,OAAO,CAAC,oBAAoB,EAAE,MAAM;QACpC,iBAAiB,CAAC,OAAS,CAAC;gBAC1B,GAAG,IAAI;gBACP,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,KAA0B;YAC1C,CAAC;IACH;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;0BAExC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAE3C,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCACC,MAAK;wCACL,IAAG;wCACH,SAAS,cAAc,SAAS;wCAChC,UAAU,IAAM,eAAe;wCAC/B,WAAU;;;;;;kDAEZ,8OAAC;wCAAM,SAAQ;kDAAY;;;;;;;;;;;;0CAG7B,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCACC,MAAK;wCACL,IAAG;wCACH,SAAS,cAAc,SAAS;wCAChC,UAAU,IAAM,eAAe;wCAC/B,WAAU;;;;;;kDAEZ,8OAAC;wCAAM,SAAQ;kDAAY;;;;;;;;;;;;;;;;;;;;;;;;0BAKjC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;sCACZ,KAAK,GAAG,CAAC,CAAC,KAAK,sBACd,8OAAC;8CAAiB;mCAAR;;;;;;;;;;;;;;;;;;;;;0BAMlB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,8OAAC;wBAAI,WAAU;kCACZ,CAAC;WACD,EAAE,YAAY;YACb,EAAE,YAAY;;UAEhB,CAAC;;;;;;;;;;;;0BAIL,8OAAC;gBACC,WAAU;gBACV,SAAS;oBACP,OAAO;oBACP,MAAM;gBACR;0BACD;;;;;;;;;;;;AAKP","debugId":null}}]
}